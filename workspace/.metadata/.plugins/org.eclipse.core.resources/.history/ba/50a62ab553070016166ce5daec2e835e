import java.lang.reflect.Array;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.rmi.Naming;
import java.rmi.RMISecurityManager;
import java.util.ArrayList;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;

public class Main {

	final static String CALL_EXAMPLE = "\nServer Usage:\n" + "    java Main [type] [ip address]\n" + "Example	:\n"
			+ "    java Main -server 127.0.0.1\n" + "\nClient Usage:\n"
			+ "    java Main [type] [policy file] [host:port]\n" + "Example:\n"
			+ "    java Main -client ..\\client.policy 127.0.0.1\n";
	final static String BINDING_NAME = "MY___SERVER";

	public static void main(String[] args) throws InterruptedException, UnknownHostException {
		// TODO Auto-generated method stub
		// final BlockingQueue<String> workQueue = new
		// LinkedBlockingQueue<String>();
		// final ConcurrentHashMap<String, String> dict = new
		// ConcurrentHashMap<>();
		// workQueue.put("cat");
		// workQueue.put("dog");
		// workQueue.put("grape");
		// Producer producer = new Producer(workQueue);
		// ArrayList<Consumer> consumers = new ArrayList<>();
		//
		// // producer.start();
		// for (int i = 0; i < 5; i++) {
		// Consumer c = new Consumer(dict, workQueue);
		// c.start();
		// consumers.add(c);
		// }
		//
		// Thread.sleep(10000000);
		//
		// System.out.println("Interrupting...");
		// producer.interrupt();
		// for (Consumer consumer : consumers) {
		// consumer.interrupt();
		// }

		if (!validateArgs(args)) {
			return;
		}

		String type = args[0];
		if (type.equals("-server")) {
			startServer(args);
		} else if (type.equals("-client")) {
			startClient(args);
		}

	}

	private static boolean validateArgs(String[] args) {
		if (args == null || args.length < 1) {
			System.out.println("Incorrect call.\n" + CALL_EXAMPLE);
			return false;
		}

		String type = args[0];
		if (type.equals("-server")) {
			int expectedNumberOfArgs = 2;
			if (args != null && args.length >= expectedNumberOfArgs) {
				String host = args[1];
				try {
					Inet4Address.getByName(host);
					return true;
				} catch (UnknownHostException e) {
					// e.printStackTrace();
					System.out.println("Invalid argument. You must provide a valid IP Address.");
				}
			} else {
				System.out.println("Incorrect call. " + "Expected " + expectedNumberOfArgs + " arguments.");
			}
			System.out.println(CALL_EXAMPLE);
			return false;
		} else if (type.equals("-client")) {
			int expectedNumberOfArgs = 3;
			if (args != null && args.length >= expectedNumberOfArgs) {
				String policy = args[1];
				String host = args[2];
				if (!new java.io.File(policy).exists()) {
					System.out.println("Invalid argument. File " + policy + " could not be found.");
				} else {
					try {
						Inet4Address.getByName(host);
						return true;
					} catch (UnknownHostException e) {
						// e.printStackTrace();
						System.out.println("Invalid argument. You must provide a valid IP Address.");
					}
				}
			} else {
				System.out.println("Incorrect call. " + "Expected " + expectedNumberOfArgs + " arguments.");
			}
			System.out.println(CALL_EXAMPLE);
			return false;
		} else {
			return false;
		}
	}

	public static void startServer(String[] args) throws UnknownHostException {

		try {
			final BlockingQueue<String> workQueue = new LinkedBlockingQueue<String>();
			final ConcurrentHashMap<String, String> dict = new ConcurrentHashMap<>();
			final String bindName = BINDING_NAME;
			final String hostname = args[1];
			final int nworkers = Integer.valueOf(args[2]);
			final String startWord = args[3];
			
			System.setProperty("java.rmi.server.hostname", hostname);
			System.out.println("Hostname set to: " + hostname);
			System.out.println("Bind name set to: " + bindName);

			workQueue.put(startWord);
			RMIConnector conn = new RMIConnector(workQueue, dict, bindName);

			System.out.println("Object binded to name: " + bindName);
			System.out.println("Ready for connections...\n\n");
			
			System.out.println("Creating workers...");			
			System.out.println(nworkers + " worker(s) will be created");
			ArrayList<WordEater> workerList = new ArrayList<>();
			for (int i = 0; i < nworkers; i++) {
				workerList.add(new WordEater(dict, workQueue));
			}
			
			Runtime.getRuntime().addShutdownHook(new Thread() {
			    public void run() {
			    	System.out.print("Asking clients to stop...");
			    	conn.interruptWorkers();
			    	System.out.print("Interrupting workers...");
			    	for (WordEater worker : workerList) {
						worker.interrupt();
					}
			    	System.out.println("Done.");
		    	}
			 });
			
			System.out.println("Starting workers...");	
			for (WordEater worker : workerList) {
				worker.start();
			}
			
			for (WordEater worker : workerList) {
				worker.join();
			}

		} catch (Exception e) {
			System.out.println("MAIN:server:err: " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static void startClient(String[] args) {
		final String securityPolicy = args[1];
		final String host = args[2];

		System.out.println("Setting policy");
		System.setProperty("java.security.policy", securityPolicy);

		// I download server's stubs ==> must set a SecurityManager
		System.setSecurityManager(new RMISecurityManager());

		try {
			IRMIConnector conn = (IRMIConnector) Naming.lookup("//" + host + "/" + BINDING_NAME);
			System.out.println("connected");
		} catch (Exception e) {
			System.out.println("RMIClient exception: " + e.getMessage());
			e.printStackTrace();
		}

	}

}
