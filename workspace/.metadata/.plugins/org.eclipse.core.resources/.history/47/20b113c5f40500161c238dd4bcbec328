import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;

public class WorkerWrapper<T> {

	    private final BlockingQueue<T> workQueue;
	    private final ExecutorService service;

	    public WorkerWrapper(int numWorkers, int workQueueSize) {
	        workQueue = new LinkedBlockingQueue<T>(workQueueSize);
	        service = Executors.newFixedThreadPool(numWorkers);

	        for (int i=0; i < numWorkers; i++) {
	            service.submit(new WorkerWrapper<T>(workQueue));
	        }
	    }

	    public void produce(T item) {
	        try {
	            workQueue.put(item);
	        } catch (InterruptedException ex) {
	            Thread.currentThread().interrupt();
	        }
	    }


	    private static class Worker<T> implements Runnable {
	        private final BlockingQueue<T> workQueue;

	        public Worker(BlockingQueue<T> workQueue) {
	            this.workQueue = workQueue;
	        }

	        @Override
	        public void run() {
	            while (!Thread.currentThread().isInterrupted()) {
	                try {
	                    T item = workQueue.take();
	                    // Process item
	                } catch (InterruptedException ex) {
	                    Thread.currentThread().interrupt();
	                    break;
	                }
	            }
	        }
	    }
	
}


