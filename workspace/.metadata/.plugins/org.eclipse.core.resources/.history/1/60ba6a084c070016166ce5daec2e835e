import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.RMISecurityManager;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;

public class Main {

	static interface IRMIConnector extends java.rmi.Remote {
		BlockingQueue<String> getWorkQueue() throws RemoteException;

		ConcurrentHashMap<String, String> getDictionary() throws RemoteException;
	}

	static class RMIConnector extends UnicastRemoteObject implements IRMIConnector {
		final BlockingQueue<String> workQueue;
		final ConcurrentHashMap<String, String> dict;

		public RMIConnector(BlockingQueue<String> workQueue, ConcurrentHashMap<String, String> dict, String bindingName)
				throws RemoteException, MalformedURLException {
			super();
			this.workQueue = workQueue;
			this.dict = dict;
			Naming.rebind(bindingName, this);
		}

		@Override
		public BlockingQueue<String> getWorkQueue() throws RemoteException {
			return this.workQueue;
		}

		@Override
		public ConcurrentHashMap<String, String> getDictionary() throws RemoteException {
			return this.dict;
		}
	}

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		// final BlockingQueue<String> workQueue = new
		// LinkedBlockingQueue<String>();
		// final ConcurrentHashMap<String, String> dict = new
		// ConcurrentHashMap<>();
		// workQueue.put("cat");
		// workQueue.put("dog");
		// workQueue.put("grape");
		// Producer producer = new Producer(workQueue);
		// ArrayList<Consumer> consumers = new ArrayList<>();
		//
		// // producer.start();
		// for (int i = 0; i < 5; i++) {
		// Consumer c = new Consumer(dict, workQueue);
		// c.start();
		// consumers.add(c);
		// }
		//
		// Thread.sleep(10000000);
		//
		// System.out.println("Interrupting...");
		// producer.interrupt();
		// for (Consumer consumer : consumers) {
		// consumer.interrupt();
		// }
		String type = args[0];
		if (type.equals("-server")) {
			startServer(args);
		} else if (type.equals("-client")) {

		}

	}

	public static void startServer(String[] args) {
		try {
			final BlockingQueue<String> workQueue = new LinkedBlockingQueue<String>();
			final ConcurrentHashMap<String, String> dict = new ConcurrentHashMap<>();
			final String bindName = "MyServer";
			final String hostname = "127.0.0.1";

			System.setProperty("java.rmi.server.hostname", hostname);
			System.out.println("Hostname set to: " + hostname);
			System.out.println("Bind name set to: " + bindName);

			RMIConnector conn = new RMIConnector(workQueue, dict, bindName);
			// RemoteNameSearch nameSearch = new RemoteNameSearch(bindName);
			System.out.println("Object binded to name: " + bindName);
			System.out.println("Ready for connections...");

		} catch (Exception e) {
			System.out.println("RMIServer err: " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static void startClient() {
		final String securityPolicy = "client.policy";
		final String host = "127.0.0.1";

		System.out.println("Setting policy");
		System.setProperty("java.security.policy", securityPolicy);

		// I download server's stubs ==> must set a SecurityManager
		System.setSecurityManager(new RMISecurityManager());

		try {
			IRMIConnector conn = (IRMIConnector) Naming.lookup("//" + host + "/NameSearchServer");			
		} catch (Exception e) {
			System.out.println("RMIClient exception: " + e.getMessage());
			e.printStackTrace();
		}

	}

}
