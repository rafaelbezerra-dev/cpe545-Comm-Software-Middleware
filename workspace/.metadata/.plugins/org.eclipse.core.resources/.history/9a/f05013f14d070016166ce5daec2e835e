import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.rmi.Naming;
import java.rmi.RMISecurityManager;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;

public class Main {

	final static String CALL_EXAMPLE = "\nServer Usage:\n" + "    java Main [type] [ip address]\n" + "Example	:\n"
			+ "    java Main -server 127.0.0.1\n" + "\nClient Usage:\n"
			+ "    java Main [type] [policy file] [host:port]\n" + "Example:\n"
			+ "    java Main -client ..\\client.policy 127.0.0.1\n";

	public static void main(String[] args) throws InterruptedException, UnknownHostException {
		// TODO Auto-generated method stub
		// final BlockingQueue<String> workQueue = new
		// LinkedBlockingQueue<String>();
		// final ConcurrentHashMap<String, String> dict = new
		// ConcurrentHashMap<>();
		// workQueue.put("cat");
		// workQueue.put("dog");
		// workQueue.put("grape");
		// Producer producer = new Producer(workQueue);
		// ArrayList<Consumer> consumers = new ArrayList<>();
		//
		// // producer.start();
		// for (int i = 0; i < 5; i++) {
		// Consumer c = new Consumer(dict, workQueue);
		// c.start();
		// consumers.add(c);
		// }
		//
		// Thread.sleep(10000000);
		//
		// System.out.println("Interrupting...");
		// producer.interrupt();
		// for (Consumer consumer : consumers) {
		// consumer.interrupt();
		// }

		if (!validateArgs(args)) {
			return;
		}

		String type = args[0];
		if (type.equals("-server")) {
			startServer(args);
		} else if (type.equals("-client")) {

		}

	}

	private static boolean validateArgs(String[] args) {
		String type = args[0];
		if (type.equals("-server")) {
			int expectedNumberOfArgs = 2;
			if (args != null && args.length >= expectedNumberOfArgs) {
				try {
					Inet4Address.getByName(args[0]);
					return true;
				} catch (UnknownHostException e) {
					// e.printStackTrace();
					System.out.println("Invalid argument. You must provide a valid IP Address.");
				}
			} else {
				System.out.println("Incorrect call. " + "Expected " + expectedNumberOfArgs + " arguments.");
			}
			System.out.println(CALL_EXAMPLE);
			return false;
		} else if (type.equals("-client")) {
			int expectedNumberOfArgs = 3;
			if (args != null && args.length >= expectedNumberOfArgs) {

				if (!new java.io.File(args[0]).exists()) {
					System.out.println("Invalid argument. File " + args[0] + " could not be found.");
				} else {
					try {
						Inet4Address.getByName(args[1]);
						return true;
					} catch (UnknownHostException e) {
						// e.printStackTrace();
						System.out.println("Invalid argument. You must provide a valid IP Address.");
					}
				}
			} else {
				System.out.println("Incorrect call. " + "Expected " + expectedNumberOfArgs + " arguments.");
			}
			System.out.println(CALL_EXAMPLE);
			return false;
		}
		else{
			
		}
	}

	public static void startServer(String[] args) throws UnknownHostException {

		try {
			final BlockingQueue<String> workQueue = new LinkedBlockingQueue<String>();
			final ConcurrentHashMap<String, String> dict = new ConcurrentHashMap<>();
			final String bindName = "MyServer";
			final String hostname = "127.0.0.1";

			System.setProperty("java.rmi.server.hostname", hostname);
			System.out.println("Hostname set to: " + hostname);
			System.out.println("Bind name set to: " + bindName);

			RMIConnector conn = new RMIConnector(workQueue, dict, bindName);
			// RemoteNameSearch nameSearch = new RemoteNameSearch(bindName);
			System.out.println("Object binded to name: " + bindName);
			System.out.println("Ready for connections...");

		} catch (Exception e) {
			System.out.println("RMIServer err: " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static void startClient() {
		final String securityPolicy = "client.policy";
		final String host = "127.0.0.1";

		System.out.println("Setting policy");
		System.setProperty("java.security.policy", securityPolicy);

		// I download server's stubs ==> must set a SecurityManager
		System.setSecurityManager(new RMISecurityManager());

		try {
			IRMIConnector conn = (IRMIConnector) Naming.lookup("//" + host + "/NameSearchServer");
		} catch (Exception e) {
			System.out.println("RMIClient exception: " + e.getMessage());
			e.printStackTrace();
		}

	}

}
