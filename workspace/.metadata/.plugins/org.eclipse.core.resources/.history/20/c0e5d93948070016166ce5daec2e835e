import java.util.ArrayList;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;

public class Main {

	static interface IRMIConnector extends java.rmi.Remote {

	}
	
	static interface RMIConnector extends java.rmi.Remote {

	}
	
	

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		final BlockingQueue<String> workQueue = new LinkedBlockingQueue<String>();
		final ConcurrentHashMap<String, String> dict = new ConcurrentHashMap<>();
		workQueue.put("cat");
		workQueue.put("dog");
		workQueue.put("grape");
		Producer producer = new Producer(workQueue);
		ArrayList<Consumer> consumers = new ArrayList<>();

		// producer.start();
		for (int i = 0; i < 5; i++) {
			Consumer c = new Consumer(dict, workQueue);
			c.start();
			consumers.add(c);
		}

		Thread.sleep(10000000);

		System.out.println("Interrupting...");
		producer.interrupt();
		for (Consumer consumer : consumers) {
			consumer.interrupt();
		}

	}

}
